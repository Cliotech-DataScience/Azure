{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "puDataFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Contact_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Contact crm to sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Id_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"additionalColumns": [
									{
										"name": "ETL_update_date",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"query": {
									"value": "<fetch>  \n   <entity name='contact'> \n     <attribute name='contactid'/>  \n     <attribute name='new_scmmcontactid'/>\n     <attribute name='cr838_fxnetaccountnumber'/> \n\t <attribute name='createdon'/>   \t \n\t <attribute name='modifiedon'/>     \n<filter type=\"and\">\n<condition attribute='modifiedon' operator='on-or-after' value=\"@{activity('LK_Last_Id_Mng_azure_ETL').output.firstRow.LastIncrementalDate}\" />\n</filter>    \n   </entity>   \n</fetch>\n",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"Dynamics_Contact_Id"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "contactid",
											"type": "Guid"
										},
										"sink": {
											"name": "Dynamics_Contact_Id",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "new_scmmcontactid",
											"type": "String"
										},
										"sink": {
											"name": "Scmm_Contact_Id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "cr838_fxnetaccountnumber",
											"type": "Int32"
										},
										"sink": {
											"name": "Fxnet_Accountnumber",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "Modified_Date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "createdon",
											"type": "DateTime"
										},
										"sink": {
											"name": "Created_Date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ETL_update_date",
											"type": "String"
										},
										"sink": {
											"name": "ETL_update_date",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Dataverse_Contact",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "scmm_pr2_sink",
								"type": "DatasetReference",
								"parameters": {
									"Table_name": "Contacts"
								}
							}
						]
					},
					{
						"name": "LK_Last_Id_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  LastIncrementalDate=DATEADD(MINUTE,0,LastIncrementalDate)   \n  ---- remove to use incremental\n FROM  Mng_data_factory_ETL\n  WHERE TableName='CRM_Contacts'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Mng_data_factory_etl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LK_last_last_Modified_Date",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Contact crm to sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT   Last_Modified_Date=MAX(Modified_Date)  FROM msmkt.',pipeline().parameters.Table_name)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "scmm_pr2_sink",
								"type": "DatasetReference",
								"parameters": {
									"Table_name": "Contacts"
								}
							}
						}
					},
					{
						"name": "Mng_data_factory_ETL",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LK_last_last_Modified_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_Update_Mng_data_factory_ETL]",
							"storedProcedureParameters": {
								"LastId": {
									"value": "-1",
									"type": "Int64"
								},
								"LastIncrementalDate": {
									"value": {
										"value": "@{activity('LK_last_last_Modified_Date').output.firstRow.last_Modified_Date}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": "CRM_Contacts",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Azure BI db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Table_name": {
						"type": "string",
						"defaultValue": "Contacts"
					}
				},
				"folder": {
					"name": "CRM"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contacts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Id_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT  LastIncrementalDate=LastId \n  ---- remove to use incremental\n FROM  Mng_data_factory_ETL\n  WHERE TableName='Contacts'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Mng_data_factory_etl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Id_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * from   EmErp_LM.azure.scmm_contacts\n where update_date > CAST(CAST('@{activity('LK_Last_Id_Mng_azure_ETL').output.firstRow.LastIncrementalDate}' AS bigint) AS VARBINARY(8))\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"parallelCopies": 6
						},
						"inputs": [
							{
								"referenceName": "Contacts",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Blob_Contacts",
								"type": "DatasetReference",
								"parameters": {
									"folder_name": "Contacts"
								}
							}
						]
					},
					{
						"name": "update_mng_azure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_Update_Mng_data_factory_ETL",
							"storedProcedureParameters": {
								"LastId": {
									"value": {
										"value": "@{activity('LK_new_max_id').output.firstRow.last_id}",
										"type": "Expression"
									},
									"type": "Int64"
								},
								"LastIncrementalDate": {
									"value": "1990-01-01",
									"type": "DateTime"
								},
								"TableName": {
									"value": "Contacts",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Azure BI db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LK_new_max_id",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT last_id= MAX(timeStampINT)\nFROM EmErp_LM.azure.scmm_contacts\n",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Contacts",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Contacts",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "update_mng_azure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Dimensions/contacts"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Model Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Model Data",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "Assignment.Model_Data"
							},
							{
								"name": "Destination",
								"value": "mirrordatafs//adata"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "DM_Model_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_Model_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Assignment Score"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_5qf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_5qf",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.agent_tab"
							},
							{
								"name": "Destination",
								"value": "agents"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "CosmosDbSqlApiSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "agent_numerator",
											"type": "Int32"
										},
										"sink": {
											"path": "$"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "Guid"
										},
										"sink": {
											"path": "$['agent_id']"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"path": "$['agent_name']"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "Byte"
										},
										"sink": {
											"path": "$['status']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_5qf",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_5qf",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_Moneytrans')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_4o1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "dbo.Fact_MoneyTrans"
							},
							{
								"name": "Destination",
								"value": "mirrordatafs/moneytrans/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}/mtrans_@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}@{formatDateTime(pipeline().parameters.windowStart,'MM')}@{formatDateTime(pipeline().parameters.windowStart,'dd')}"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[Fact_MoneyTrans] \nwhere [Request_Date] >= '@{formatDateTime(pipeline().parameters.windowStart, 'yyyy-MM-dd HH:mm' )}' \nAND [Request_Date] < '@{formatDateTime(pipeline().parameters.windowEnd, 'yyyy-MM-dd HH:mm' )}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Moneytrans_Id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['Moneytrans_Id']"
										}
									},
									{
										"source": {
											"name": "Update_Date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['Update_Date']"
										}
									},
									{
										"source": {
											"name": "Request_Date",
											"type": "DateTime"
										},
										"sink": {
											"path": "$['Request_Date']"
										}
									},
									{
										"source": {
											"name": "AccountNumber",
											"type": "Int32"
										},
										"sink": {
											"path": "$['AccountNumber']"
										}
									},
									{
										"source": {
											"name": "CCY",
											"type": "String"
										},
										"sink": {
											"path": "$['CCY']"
										}
									},
									{
										"source": {
											"name": "Amount",
											"type": "Double"
										},
										"sink": {
											"path": "$['Amount']"
										}
									},
									{
										"source": {
											"name": "Moneytrans_Stage_Id",
											"type": "Int16"
										},
										"sink": {
											"path": "$['Moneytrans_Stage_Id']"
										}
									},
									{
										"source": {
											"name": "Moneytrans_Stage",
											"type": "String"
										},
										"sink": {
											"path": "$['Moneytrans_Stage']"
										}
									},
									{
										"source": {
											"name": "Credit_Card",
											"type": "String"
										},
										"sink": {
											"path": "$['Credit_Card']"
										}
									},
									{
										"source": {
											"name": "WireTransfer_Bank",
											"type": "String"
										},
										"sink": {
											"path": "$['WireTransfer_Bank']"
										}
									},
									{
										"source": {
											"name": "Payment_Provider_Id",
											"type": "Int16"
										},
										"sink": {
											"path": "$['Payment_Provider_Id']"
										}
									},
									{
										"source": {
											"name": "Payment_Provider",
											"type": "String"
										},
										"sink": {
											"path": "$['Payment_Provider']"
										}
									},
									{
										"source": {
											"name": "Payment_Type_Id",
											"type": "Int16"
										},
										"sink": {
											"path": "$['Payment_Type_Id']"
										}
									},
									{
										"source": {
											"name": "Payment_Type",
											"type": "String"
										},
										"sink": {
											"path": "$['Payment_Type']"
										}
									},
									{
										"source": {
											"name": "Payment_Provider_Owner_Broker_Id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['Payment_Provider_Owner_Broker_Id']"
										}
									},
									{
										"source": {
											"name": "Sessions_ID",
											"type": "Int64"
										},
										"sink": {
											"path": "$['Sessions_ID']"
										}
									},
									{
										"source": {
											"name": "Amount_USD",
											"type": "Double"
										},
										"sink": {
											"path": "$['Amount_USD']"
										}
									},
									{
										"source": {
											"name": "Is_First_Deposit_Success",
											"type": "Int16"
										},
										"sink": {
											"path": "$['Is_First_Deposit_Success']"
										}
									},
									{
										"source": {
											"name": "Is_First_Deposit_Attempt",
											"type": "Int16"
										},
										"sink": {
											"path": "$['Is_First_Deposit_Attempt']"
										}
									},
									{
										"source": {
											"name": "Payment_Clearer_Id",
											"type": "Int32"
										},
										"sink": {
											"path": "$['Payment_Clearer_Id']"
										}
									},
									{
										"source": {
											"name": "Payment_Clearer_Name",
											"type": "String"
										},
										"sink": {
											"path": "$['Payment_Clearer_Name']"
										}
									},
									{
										"source": {
											"name": "PaymentAuthenticationModeID",
											"type": "Byte"
										},
										"sink": {
											"path": "$['PaymentAuthenticationModeID']"
										}
									},
									{
										"source": {
											"name": "PaymentAuthenticationMode",
											"type": "String"
										},
										"sink": {
											"path": "$['PaymentAuthenticationMode']"
										}
									},
									{
										"source": {
											"name": "ConcretePaymentTypeID",
											"type": "Int32"
										},
										"sink": {
											"path": "$['ConcretePaymentTypeID']"
										}
									},
									{
										"source": {
											"name": "ConcretePaymentType",
											"type": "String"
										},
										"sink": {
											"path": "$['ConcretePaymentType']"
										}
									},
									{
										"source": {
											"name": "CCTypeId",
											"type": "Byte"
										},
										"sink": {
											"path": "$['CCTypeId']"
										}
									},
									{
										"source": {
											"name": "CCType",
											"type": "String"
										},
										"sink": {
											"path": "$['CCType']"
										}
									},
									{
										"source": {
											"name": "First6",
											"type": "String"
										},
										"sink": {
											"path": "$['First6']"
										}
									},
									{
										"source": {
											"name": "CCIssuer",
											"type": "String"
										},
										"sink": {
											"path": "$['CCIssuer']"
										}
									},
									{
										"source": {
											"name": "CCCountry",
											"type": "String"
										},
										"sink": {
											"path": "$['CCCountry']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_4o1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_4o1",
								"type": "DatasetReference",
								"parameters": {
									"cw_fileName": "mtrans_@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}@{formatDateTime(pipeline().parameters.windowStart,'MM')}@{formatDateTime(pipeline().parameters.windowStart,'dd')}",
									"cw_folderPath": "moneytrans/@{formatDateTime(pipeline().parameters.windowStart,'yyyy')}/@{formatDateTime(pipeline().parameters.windowStart,'MM')}"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					},
					"windowEnd": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_small_tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach_y59",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy_y59",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "@{item().source.schema}.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "bi.@{item().destination.table}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": {
												"value": "@item().copySink.writeBehavior",
												"type": "Expression"
											},
											"sqlWriterUseTableLock": {
												"value": "@item().copySink.sqlWriterUseTableLock",
												"type": "Expression"
											},
											"upsertSettings": {
												"useTempDB": true
											},
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SourceDataset_y59",
											"type": "DatasetReference",
											"parameters": {
												"cw_schema": "@item().source.schema",
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DestinationDataset_y59",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().destination.table"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"schema": "Calls",
									"table": "CallModes"
								},
								"destination": {
									"table": "CallModes"
								},
								"copySink": {
									"writeBehavior": "insert",
									"sqlWriterUseTableLock": false
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "CallModeID",
													"type": "Byte",
													"physicalType": "tinyint"
												},
												"sink": {
													"name": "CallModeID",
													"type": "Byte"
												}
											},
											{
												"source": {
													"name": "CallModeName",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "CallModeName",
													"type": "String"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"schema": "Communication",
									"table": "Statuses"
								},
								"destination": {
									"table": "Statuses"
								},
								"copySink": {
									"writeBehavior": null,
									"sqlWriterUseTableLock": null
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "StatusID",
													"type": "Int16",
													"physicalType": "smallint"
												},
												"sink": {
													"name": "StatusID",
													"type": "Int16"
												}
											},
											{
												"source": {
													"name": "Status",
													"type": "String",
													"physicalType": "varchar"
												},
												"sink": {
													"name": "Status",
													"type": "String"
												}
											},
											{
												"source": {
													"name": "TreatAsSent",
													"type": "Boolean",
													"physicalType": "bit"
												},
												"sink": {
													"name": "TreatAsSent",
													"type": "Boolean"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer_Questionnaires')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Date_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": {
									"value": "PartitionKey eq 'Upload Data' and RowKey eq '@{variables('Table_Name')}'",
									"type": "Expression"
								},
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "etl_manage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LK_new_max_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": " SELECT Last_Update= MAX(Last_Update)\nFROM azure.AZ_Customer_Questionnaires",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dwh_Customer_Questionnaires_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Date_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * \nFROM azure.AZ_Customer_Questionnaires\nwhere Last_Update > '@{activity('LK_Last_Date_Mng_azure_ETL').output.firstRow.Last_Incremental_Date}' \n  and Last_Update <= '@{activity('LK_new_max_date').output.firstRow.Last_Update}'\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "dwh_Customer_Questionnaires_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dwh_Customer_Questionnaires_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Manage Table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "run_Load Customer_Questionnaires",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MergeTableStore",
								"type": "PipelineReference"
							},
							"parameters": {
								"PartitionKey": "Upload Data",
								"RowKey": {
									"value": "@variables('Table_Name')",
									"type": "Expression"
								},
								"PropertyName": "Last_Incremental_Date",
								"PropertyValue": {
									"value": "@activity('LK_new_max_date').output.firstRow.Last_Update",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "run_Load Customer_Questionnaires",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Dimensions/Load Customer_Questionnaires"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete_copy_file",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Update Manage Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dwh_Customer_Questionnaires_blob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Table_Name": {
						"type": "String",
						"defaultValue": "Customer_Questionnaires"
					}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Id_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  LastIncrementalDate=DATEADD(DAY,-1,LastIncrementalDate)   \n  ---- remove to use incremental\n FROM  Mng_data_factory_ETL\n  WHERE TableName='Customers'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Mng_data_factory_etl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LK_new_max_id",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT ExecutionDate=MAX(SsisUpdatedDate)\n FROM azure.AZ_Customers",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DWH_Dim_Customers_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Id_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from  dwh.azure.AZ_Customers\n where SsisUpdatedDate > '@{activity('LK_Last_Id_Mng_azure_ETL').output.firstRow.LastIncrementalDate}' ",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "DWH_Dim_Customers_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DWH_Dim_Customers_blob",
								"type": "DatasetReference",
								"parameters": {
									"folder_name": "Customers"
								}
							}
						]
					},
					{
						"name": "update_mng_azure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_Update_Mng_data_factory_ETL",
							"storedProcedureParameters": {
								"LastId": {
									"value": "-1",
									"type": "Int64"
								},
								"LastIncrementalDate": {
									"value": {
										"value": "@{activity('LK_new_max_id').output.firstRow.ExecutionDate}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": "Customers",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Azure BI db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Customers",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "update_mng_azure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Dimensions/Customers"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_Calls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_new_max_Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT Next_Call_Day=DATEADD(DAY,-1,MAX(callday))\nFROM dwh.azure.AZ_Calls",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dwh_calls_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_new_max_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_Last_Date_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * \nFROM dwh.azure.AZ_calls\nwhere callday> '@{activity('LK_Last_Date_Mng_azure_ETL').output.firstRow.Last_Incremental_Date}' and callday<= '@{activity('LK_new_max_Date').output.firstRow.Next_Call_Day}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"Call_ID": "Call_ID",
									"Call_Details": "Call_Details",
									"CallDay": "CallDay"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dwh_calls_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dwh_calls_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "LK_Last_Date_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": "PartitionKey eq 'Upload Data' and RowKey eq 'DWH_Calls'",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "etl_manage",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Load Calls to Events",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "merge tbl store",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Calls/Load Calls"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "merge tbl store",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MergeTableStore",
								"type": "PipelineReference"
							},
							"parameters": {
								"PartitionKey": "Upload Data",
								"RowKey": "DWH_Calls",
								"PropertyName": "Last_Incremental_Date",
								"PropertyValue": {
									"value": "@{activity('LK_new_max_Date').output.firstRow.Next_Call_Day}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_Dim_Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"User_ID": "User_ID",
									"details": "details"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dwh_Dim_Users_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dwh_Dim_Users_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Load_Users",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Dimensions/Users"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_Lead_Assignments')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "assignments",
				"activities": [
					{
						"name": "LK_Last_Date_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": {
									"value": "PartitionKey eq 'Upload Data' and RowKey eq '@{variables('Table_Name')}'",
									"type": "Expression"
								},
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "etl_manage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LK_new_max_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT Last_Date=MAX(Assignment_Date)\nFROM azure.AZ_Lead_Assignments \nWHERE Assignment_Day BETWEEN\nCAST(GETDATE() - 100 AS DATE) AND CAST(GETDATE() - 1 AS DATE) \n",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dwh_lead_assignments_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Date_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * \nFROM azure.AZ_Lead_Assignments\nwhere Assignment_Date > '@{activity('LK_Last_Date_Mng_azure_ETL').output.value[0].Last_Incremental_Date}' \n  and Assignment_Date <= '@{activity('LK_new_max_date').output.firstRow.Last_Date}'\n  and Assignment_Day > dateadd(day,-1,cast('@{activity('LK_Last_Date_Mng_azure_ETL').output.value[0].Last_Incremental_Date}' as date))\n  and Assignment_Day < dateadd(day,1,cast('@{activity('LK_new_max_date').output.firstRow.Last_Date}' as date))\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"Fact_Lead_Assignments_ID": "Fact_Lead_Assignments_ID",
									"Assignment_Day": "Assignment_Day",
									"Assignment_Date": "Assignment_Date",
									"Details": "Details"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dwh_lead_assignments_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dwh_lead_assignments_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Manage Table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MergeTableStore",
								"type": "PipelineReference"
							},
							"parameters": {
								"PartitionKey": "Upload Data",
								"RowKey": {
									"value": "@variables('Table_Name')",
									"type": "Expression"
								},
								"PropertyName": "Last_Incremental_Date",
								"PropertyValue": {
									"value": "@activity('LK_new_max_date').output.firstRow.Last_Date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "load assignments to events",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Update Manage Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/SCMM/Load Lead Assignments"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Table_Name": {
						"type": "String",
						"defaultValue": "DWH_Lead_Assignments"
					}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_Communication_Channels')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy data from on premise SQL Server to SQL Azure.\n\nYou can also go to \"Copy Data Tool\" to get the pipeline for more connectors and scenarios.",
				"activities": [
					{
						"name": "SQL_to_SQLAzure",
						"description": "Copy data from SQL server to SQL Azure",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ChannelID",
											"type": "Int32"
										},
										"sink": {
											"name": "ChannelID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ChannelTypeID",
											"type": "Byte"
										},
										"sink": {
											"name": "ChannelTypeID",
											"type": "Byte"
										}
									},
									{
										"source": {
											"name": "ChannelType",
											"type": "String"
										},
										"sink": {
											"name": "ChannelType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ChannelName",
											"type": "String"
										},
										"sink": {
											"name": "ChannelName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ChannelStatus",
											"type": "String"
										},
										"sink": {
											"name": "ChannelStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SendingMethodID",
											"type": "Int16"
										},
										"sink": {
											"name": "SendingMethodID",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "SendingMethodName",
											"type": "String"
										},
										"sink": {
											"name": "SendingMethodName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ChannelPopulationFilterId",
											"type": "Int32"
										},
										"sink": {
											"name": "ChannelPopulationFilterId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "ChannelPopulationFilter",
											"type": "String"
										},
										"sink": {
											"name": "ChannelPopulationFilter",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Channel_Event",
											"type": "String"
										},
										"sink": {
											"name": "Channel_Event",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ChannelDeliveryScheduleType",
											"type": "String"
										},
										"sink": {
											"name": "ChannelDeliveryScheduleType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CampaignID",
											"type": "Int32"
										},
										"sink": {
											"name": "CampaignID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CampaignName",
											"type": "String"
										},
										"sink": {
											"name": "CampaignName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CampaignCategory",
											"type": "String"
										},
										"sink": {
											"name": "CampaignCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Campaign_System",
											"type": "String"
										},
										"sink": {
											"name": "Campaign_System",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Campaign_Schedule_Type",
											"type": "String"
										},
										"sink": {
											"name": "Campaign_Schedule_Type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "EmailSubject",
											"type": "String"
										},
										"sink": {
											"name": "EmailSubject",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CampaignStatus",
											"type": "String"
										},
										"sink": {
											"name": "CampaignStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CampaignPopulationFilterId",
											"type": "Int32"
										},
										"sink": {
											"name": "CampaignPopulationFilterId",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CampaignPopulationFilter",
											"type": "String"
										},
										"sink": {
											"name": "CampaignPopulationFilter",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ExpectedCustomerResponse",
											"type": "String"
										},
										"sink": {
											"name": "ExpectedCustomerResponse",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "RewardID",
											"type": "Int32"
										},
										"sink": {
											"name": "RewardID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "RewardName",
											"type": "String"
										},
										"sink": {
											"name": "RewardName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Channel_Group",
											"type": "String"
										},
										"sink": {
											"name": "Channel_Group",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Scmm_Communication_Channels",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Azure_dwh_Dim_Channels",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EMERP_Events')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Id_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  LastIncrementalDate=DATEADD(MINUTE,65,LastIncrementalDate)   \n  ---- remove to use incremental\n FROM dbo.Mng_data_factory_ETL\n  WHERE TableName='EMERP_DB_Events'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Mng_data_factory_etl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LK_new_max_id",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": " SELECT ExecutionDate=MAX(Event_Date)\n FROM EmErp_DB.azure.AZ_EMERP_DB_Events",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EMERP_DB_Events",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Id_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from  EmErp_DB.azure.AZ_EMERP_DB_Events\n where Event_Date > '@{activity('LK_Last_Id_Mng_azure_ETL').output.firstRow.LastIncrementalDate}' \n AND Event_Date <= '@{activity('LK_new_max_id').output.firstRow.ExecutionDate}'",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "EMERP_DB_Events",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "blob_EMERP_Events",
								"type": "DatasetReference",
								"parameters": {
									"folder_name": "EMERP_Events"
								}
							}
						]
					},
					{
						"name": "Stored Procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_Update_Mng_data_factory_ETL",
							"storedProcedureParameters": {
								"LastId": {
									"value": "-1",
									"type": "Int64"
								},
								"LastIncrementalDate": {
									"value": {
										"value": "@{activity('LK_new_max_id').output.firstRow.ExecutionDate}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": "EMERP_DB_Events",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Azure BI db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Stored Procedure1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Emerp Events/EMERP_Events_to_events_table"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FXNET_Accounting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Date_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": {
									"value": "PartitionKey eq 'Upload Data' and RowKey eq '@{variables('Table_Name')}'",
									"type": "Expression"
								},
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "etl_manage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LK_new_max_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT Last_Activity_Date = MAX(ActionDate)\nFROM azure.AZ_Accounting\nWHERE ActionDay BETWEEN CAST(GETDATE() - 100 AS DATE) AND CAST(GETDATE() - 1 AS DATE) ",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "fxnet_accounting_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Date_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * \nFROM azure.AZ_Accounting\nwhere ActionDate > '@{activity('LK_Last_Date_Mng_azure_ETL').output.value[0].Last_Incremental_Date}' \n  and ActionDate <= '@{activity('LK_new_max_date').output.firstRow.Last_Activity_Date}'\n  and ActionDay > dateadd(day,-1,cast('@{activity('LK_Last_Date_Mng_azure_ETL').output.value[0].Last_Incremental_Date}' as date))\n  and ActionDay < dateadd(day,1,cast('@{activity('LK_new_max_date').output.firstRow.Last_Activity_Date}' as date))",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"fact_account_trans_id": "fact_account_trans_id",
									"ActionDay": "ActionDay",
									"ActionDate": "ActionDate",
									"Details": "Details"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "fxnet_accounting_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "fxnet_accounting_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Manage Table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MergeTableStore",
								"type": "PipelineReference"
							},
							"parameters": {
								"PartitionKey": "Upload Data",
								"RowKey": {
									"value": "@variables('Table_Name')",
									"type": "Expression"
								},
								"PropertyName": "Last_Incremental_Date",
								"PropertyValue": {
									"value": "@activity('LK_new_max_date').output.firstRow.Last_Activity_Date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Accounts to Events",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Update Manage Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/FXNET/Load Accounting"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Table_Name": {
						"type": "String",
						"defaultValue": "FXNET_Accounting"
					}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FXNET_Deals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Date_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": {
									"value": "PartitionKey eq 'Upload Data' and RowKey eq '@{variables('Table_Name')}'",
									"type": "Expression"
								},
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "etl_manage",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LK_new_max_Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT Last_Date=MAX(ExecutionDate)\nFROM azure.AZ_Deals\nWHERE executionDay BETWEEN\nCAST(GETDATE() - 100 AS DATE) AND CAST(GETDATE() - 1 AS DATE) ",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "fxnet_deals_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Date_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * \nFROM azure.AZ_Deals\nwhere executionDate > '@{activity('LK_Last_Date_Mng_azure_ETL').output.firstRow.Last_Incremental_Date}' \nand executionDate <= '@{activity('LK_new_max_Date').output.firstRow.Last_Date}'\nand executionDay > dateadd(day,-1,cast('@{activity('LK_Last_Date_Mng_azure_ETL').output.firstRow.Last_Incremental_Date}' as date))\nand executionDay < dateadd(day,1,cast('@{activity('LK_new_max_Date').output.firstRow.Last_Date}' as date))",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"TransactionNumber": "TransactionNumber",
									"ExecutionDay": "ExecutionDay",
									"ExecutionDate": "ExecutionDate",
									"Trans_Details": "Trans_Details"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "fxnet_deals_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "fxnet_deals_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update mng ETL table storage",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MergeTableStore",
								"type": "PipelineReference"
							},
							"parameters": {
								"PartitionKey": "Upload Data",
								"RowKey": {
									"value": "@variables('Table_Name')",
									"type": "Expression"
								},
								"PropertyName": "Last_Incremental_Date",
								"PropertyValue": {
									"value": "@activity('LK_new_max_Date').output.firstRow.Last_Date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load Deals",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Update mng ETL table storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/FXNET/Load Deals"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Table_Name": {
						"type": "String",
						"defaultValue": "FXNET_Deals"
					}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Journeys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Journeys crm to sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"additionalColumns": [
									{
										"name": "ETL_update_date",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"query": "<fetch>  \n   <entity name='msdynmkt_journey'> \n     <attribute name='msdynmkt_journeyid'/>  \n     <attribute name='msdynmkt_name'/>   \n\t <attribute name='modifiedon'/> \n<filter type=\"and\">\n<condition attribute='modifiedon' operator=\"last-x-days\" value=\"999\" />\n</filter>    \n   </entity>   \n</fetch>\n"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"Journey_Id"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "msdynmkt_journeyid",
											"type": "Guid"
										},
										"sink": {
											"name": "Journey_Id",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "msdynmkt_name",
											"type": "String"
										},
										"sink": {
											"name": "Journey_Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "Modified_Date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ETL_update_date",
											"type": "String"
										},
										"sink": {
											"name": "ETL_update_date",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Dataverse_Journeys",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "scmm_pr2_sink",
								"type": "DatasetReference",
								"parameters": {
									"Table_name": "Journey"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CRM"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCMM_Activities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Date_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureTableSource",
								"azureTableSourceQuery": "PartitionKey eq 'Upload Data' and RowKey eq 'SCMM_Activities'",
								"azureTableSourceIgnoreTableNotFound": false
							},
							"dataset": {
								"referenceName": "etl_manage",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LK_new_max_date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT Last_Activity_Date = MAX(Activity_Date)\nFROM azure.AZ_SCMM_Activities\n",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "scmm_activities_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Date_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * \nFROM EMERP_LM.azure.AZ_SCMM_Activities\nwhere Activity_Date > '@{activity('LK_Last_Date_Mng_azure_ETL').output.value[0].Last_Incremental_Date}' and Activity_Date <= '@{activity('LK_new_max_date').output.firstRow.Last_Activity_Date}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0,
							"translator": {
								"type": "TabularTranslator",
								"columnMappings": {
									"Activity_Id": "Activity_Id",
									"Activity_Date": "Activity_Date",
									"details": "details"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "scmm_activities_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "scmm_activities_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Manage Table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MergeTableStore",
								"type": "PipelineReference"
							},
							"parameters": {
								"PartitionKey": "Upload Data",
								"RowKey": "SCMM_Activities",
								"PropertyName": "Last_Incremental_Date",
								"PropertyValue": {
									"value": "@activity('LK_new_max_date').output.firstRow.Last_Activity_Date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load_Activities_To_Events",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Update Manage Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/SCMM/Load Activities"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Scmm_Communication_MessageTemplates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Id_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  LastIncrementalDate=DATEADD(MINUTE,10,LastIncrementalDate)   \n  ---- remove to use incremental\n FROM  Mng_data_factory_ETL\n  WHERE TableName='MessageTemplates'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Mng_data_factory_etl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LK_new_max_id",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT MAX(ContentUpdateDate) FROM emerp_lm.azure.scmm_Communication_MessageTemplates",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SCMM_ALL",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data to file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Id_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * from   EmErp_LM.azure.scmm_Communication_MessageTemplates\n where ContentUpdateDate > '@{activity('LK_Last_Id_Mng_azure_ETL').output.firstRow.LastIncrementalDate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureDatabricksDeltaLakeSink",
								"preCopyScript": "TRUNCATE TABLE prod_raw.mrr_Communication_MessageTemplates",
								"importSettings": {
									"type": "AzureDatabricksDeltaLakeImportCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "adf_staging_linked_service",
									"type": "LinkedServiceReference"
								},
								"path": "usan-data-lake-fs/adf_staging/Scmm_Communication_MessageTemplates",
								"enableCompression": false
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MessageTemplateID",
											"type": "Int32"
										},
										"sink": {
											"name": "MessageTemplateID",
											"type": "Int"
										}
									},
									{
										"source": {
											"name": "ContentKey",
											"type": "String"
										},
										"sink": {
											"name": "ContentKey",
											"type": "string"
										}
									},
									{
										"source": {
											"name": "ChannelID",
											"type": "Int32"
										},
										"sink": {
											"name": "ChannelID",
											"type": "Int"
										}
									},
									{
										"source": {
											"name": "Created",
											"type": "DateTime"
										},
										"sink": {
											"name": "Created",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Weight",
											"type": "Byte"
										},
										"sink": {
											"name": "Weight",
											"type": "Int"
										}
									},
									{
										"source": {
											"name": "ContentUpdateDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ContentUpdateDate",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SCMM_ALL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureDatabricksDelta_DWH",
								"type": "DatasetReference",
								"parameters": {
									"table": "mrr_communication_messagetemplates"
								}
							}
						]
					},
					{
						"name": "Load_Communication_MessageTemplates",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Copy data to file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/SCMM/Load_Communication_MessageTemplates",
							"baseParameters": {
								"env_type": "prod"
							}
						},
						"linkedServiceName": {
							"referenceName": "Adf_Cluster",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL/sql_to_azure_delta_table"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Serials')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Last_Id_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  LastIncrementalDate=DATEADD(MINUTE,65,LastIncrementalDate)   \n  ---- remove to use incremental\n FROM  Mng_data_factory_ETL\n  WHERE TableName='Serials'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Mng_data_factory_etl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "copy_to_blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Id_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LK_new_max_id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "BlobSink"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "serials",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Blob_Serials",
								"type": "DatasetReference",
								"parameters": {
									"folder_name": "Serials"
								}
							}
						]
					},
					{
						"name": "update_mng_azure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "copy_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_Update_Mng_data_factory_ETL",
							"storedProcedureParameters": {
								"LastId": {
									"value": "-1",
									"type": "Int64"
								},
								"LastIncrementalDate": {
									"value": {
										"value": "@{activity('LK_new_max_id').output.firstRow.ExecutionDate}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": "Serials",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Azure BI db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LK_new_max_id",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": " SELECT ExecutionDate=MAX(update_date)\n FROM azure.az_serials",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "serials",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Serials",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "update_mng_azure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Dimensions/serials"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete_serials_file",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Serials",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "blob_serials_row_folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false
						}
					},
					{
						"name": "Serials_after_delete",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Delete_serials_file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Load Data/Dimensions/serials"
						},
						"linkedServiceName": {
							"referenceName": "Analysis",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data_from_SQL"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync CRM to SCMM - Emails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "email crm to sql",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LK_Last_Id_Mng_azure_ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"additionalColumns": [
									{
										"name": "ETL_update_date",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"query": {
									"value": "<fetch>  \n   <entity name='msdynmkt_email'> \n     <attribute name='msdynmkt_emailid'/>  \n     <attribute name='msdynmkt_name'/>   \n     <attribute name='msdynmkt_subject'/>   \n\t <attribute name='msdynmkt_fromemail'/>\n\t <attribute name='msdynmkt_fromname'/> \n\t <attribute name='msdynmkt_previewtext'/> \n\t <attribute name='msdynmkt_replytoemail'/>\n\t <attribute name='msdynmkt_emailbody'/>\n\t <attribute name='msdynmkt_designerhtml'/>\n\t <attribute name='msdynmkt_previewhtml'/>\n\t <attribute name='msdynmkt_placeholders'/> \n\t <attribute name='msdynmkt_textpart'/>\n\t <attribute name='createdon'/>\n\t <attribute name='modifiedon'/> \n<filter type=\"and\">\n<condition attribute='modifiedon' operator=\"on-or-after\" value=\"@{activity('LK_Last_Id_Mng_azure_ETL').output.firstRow.LastIncrementalDate}\" />\n</filter>    \n   </entity>   \n</fetch>",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": false,
									"keys": [
										"Email_Id"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "msdynmkt_emailid",
											"type": "Guid"
										},
										"sink": {
											"name": "Email_Id",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "msdynmkt_name",
											"type": "String"
										},
										"sink": {
											"name": "Email_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_subject",
											"type": "String"
										},
										"sink": {
											"name": "Subject",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_fromemail",
											"type": "String"
										},
										"sink": {
											"name": "From_Email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_fromname",
											"type": "String"
										},
										"sink": {
											"name": "From_Name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_previewtext",
											"type": "String"
										},
										"sink": {
											"name": "Preview_Text",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_replytoemail",
											"type": "String"
										},
										"sink": {
											"name": "Reply_To_Email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_emailbody",
											"type": "String"
										},
										"sink": {
											"name": "Email_Body",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_designerhtml",
											"type": "String"
										},
										"sink": {
											"name": "Designer_Html",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_placeholders",
											"type": "String"
										},
										"sink": {
											"name": "Placeholders",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_previewhtml",
											"type": "String"
										},
										"sink": {
											"name": "Preview_Html",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "msdynmkt_textpart",
											"type": "String"
										},
										"sink": {
											"name": "Textpart",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "createdon",
											"type": "DateTime"
										},
										"sink": {
											"name": "Created_Date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "modifiedon",
											"type": "DateTime"
										},
										"sink": {
											"name": "Modified_Date",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "ETL_update_date",
											"type": "String"
										},
										"sink": {
											"name": "Etl_Update_Date",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "dataverse_Email",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "scmm_pr2_sink",
								"type": "DatasetReference",
								"parameters": {
									"Table_name": "Contacts"
								}
							}
						]
					},
					{
						"name": "LK_Last_Id_Mng_azure_ETL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  LastIncrementalDate=DATEADD(MINUTE,10,LastIncrementalDate)   \n  ---- remove to use incremental\n FROM  Mng_data_factory_ETL\n  WHERE TableName='Emails'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Mng_data_factory_etl",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LK_last_Createdon",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "email crm to sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT   last_modifiedon=MAX(modifiedon)  FROM ',pipeline().parameters.Table_name)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "scmm_dev_sink",
								"type": "DatasetReference",
								"parameters": {
									"SQL_Table_name": {
										"value": "@pipeline().parameters.Table_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Table_name": {
						"type": "string",
						"defaultValue": "Emails"
					}
				},
				"folder": {
					"name": "CRM"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}